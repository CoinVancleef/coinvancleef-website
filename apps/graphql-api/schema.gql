# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ClearEntriesResponse {
  clearEntries: [GQLClearEntryModel!]!
  totalCount: Int!
}

input ClearEntryInput {
  achievementType: String!
  dateAchieved: DateTime
  difficulty: String = "Lunatic"
  game: String!
  isNo3rdCondition: Boolean
  isNoBombs: Boolean
  isNoDeaths: Boolean
  numberOfBombs: Int
  numberOfDeaths: Int
  replayLink: String
  shotType: String!
  videoLink: String
}

type ClearEntryResponse {
  clearEntry: GQLClearEntryModel
  errors: [FieldError!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  field: String!
  message: String!
}

type GQLClearEntryModel {
  achievementType: String!
  createdAt: DateTime!
  createdBy: GQLUserModel!
  danmaku_points: Int!
  dateAchieved: DateTime
  difficulty: String!
  game: String!
  isNo3rdCondition: Boolean
  isNoBombs: Boolean
  isNoDeaths: Boolean
  numberOfBombs: Int
  numberOfDeaths: Int
  public_uuid: String!
  replayLink: String
  shotType: String!
  updatedAt: DateTime!
  verified: Boolean!
  videoLink: String
}

type GQLUserModel {
  clearEntries: [GQLClearEntryModel!]
  country: String
  createdAt: DateTime!
  danmaku_points: Int!
  discord: String
  email: String!
  globalRank: Int
  l1cc: Int!
  lnb: Int!
  lnn: Int!
  name: String
  profilePicture: String
  public_uuid: String!
  role: String!
  totalClears: Int!
  twitchChannel: String
  twitterHandle: String
  updatedAt: DateTime!
  youtubeChannel: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createClearEntry(data: ClearEntryInput!): ClearEntryResponse!
  deleteClearEntry(publicUuid: String!): Boolean!
  login(data: LoginInput!): UserResponse!
  register(data: UserInput!): UserResponse!
  updateClearEntry(data: UpdateClearEntryInput!): ClearEntryResponse!
  updateProfile(data: UpdateProfileInput!): UserResponse!
  verifyClearEntry(data: VerifyClearEntryInput!): ClearEntryResponse!
}

type Query {
  clearEntries: ClearEntriesResponse!
  clearEntry(publicUuid: String!): GQLClearEntryModel
  dbTest: String!
  leaderboard: [GQLUserModel!]!
  user(publicUuid: String!): GQLUserModel
  userClearEntries(userPublicUuid: String!): ClearEntriesResponse!
  users: [GQLUserModel!]!
}

input UpdateClearEntryInput {
  achievementType: String
  dateAchieved: DateTime
  game: String
  isNo3rdCondition: Boolean
  isNoBombs: Boolean
  isNoDeaths: Boolean
  numberOfBombs: Int
  numberOfDeaths: Int
  public_uuid: String!
  replayLink: String
  shotType: String
  videoLink: String
}

input UpdateProfileInput {
  discord: String
  name: String
  twitchChannel: String
  twitterHandle: String
  youtubeChannel: String
}

input UserInput {
  country: String
  discord: String
  email: String!
  name: String
  password: String!
  twitchChannel: String
  twitterHandle: String
  youtubeChannel: String
}

type UserResponse {
  errors: [FieldError!]
  token: String
  user: GQLUserModel
}

input VerifyClearEntryInput {
  danmaku_points: Int
  public_uuid: String!
  verified: Boolean!
}