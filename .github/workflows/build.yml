name: Project Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build All Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.6.0'
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      # Setup dummy database URL for Prisma
      - name: Setup dummy database URL for Prisma
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test?schema=public" >> packages/database/.env
          echo "DIRECT_URL=postgresql://test:test@localhost:5432/test?schema=public" >> packages/database/.env
          echo "SHADOW_DATABASE_URL=postgresql://test:test@localhost:5432/test_shadow?schema=public" >> packages/database/.env

      # Generate Prisma client specifically in the database package directory
      - name: Generate Prisma Client
        working-directory: packages/database
        run: npx prisma generate

      # Build database package first to ensure types are available
      - name: Build database package
        working-directory: packages/database
        run: npx tsc

      # Now build everything
      - name: Build all packages
        run: pnpm build
